name: PR TEST - Technical Review
on:
  repository_dispatch:
    types: prtestautomation

run-name: PR TEST - ${{ toJSON(github.event.client_payload.ritm_details.number) }}

#Special Pemissions required for OIDC authentication
permissions:
  id-token: write
  contents: write
  pull-requests: write

jobs:
  branch_check_and_create:
    runs-on: ubuntu-latest
    env:
      PAYLOAD: ${{toJSON(github.event.client_payload)}}
      TASK_ID: ${{toJSON(github.event.client_payload.task_details.sysid)}}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_ACCESS_TOKEN }}

      - name: Setup Git Configuration
        id: setupgit
        run: |
          git config --global user.name aqueefcs
          git config --global user.email aqueefalimansari007@gmail.com

      - name: Check if branch exists
        id: check_branch
        run: |
          BRANCH_NAME="${{ toJSON(github.event.client_payload.ritm_details.number) }}"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

          if git ls-remote --exit-code --heads origin $BRANCH_NAME > /dev/null 2>&1; then
            echo "Branch exist"
            EXIT_CODE="true"
            echo "exitcode=$EXIT_CODE" >> $GITHUB_OUTPUT
          else
            echo "Branch not exist"
            EXIT_CODE="false"
            echo "exitcode=$EXIT_CODE" >> $GITHUB_OUTPUT
          fi

      - name: Create Branch
        if: steps.check_branch.outputs.exitcode == 'false'
        run: |
          echo ${{steps.check_branch.outputs.branch_name}}
          git remote set-url origin "https://${{ secrets.GH_ACCESS_TOKEN }}@github.com/${{ github.repository }}"
          git push origin HEAD:refs/heads/${{ steps.check_branch.outputs.branch_name }}
          echo "Branch ${{ steps.check_branch.outputs.branch_name }} created"

    outputs:
      exit-code: ${{ steps.check_branch.outputs.exitcode }}
      branch-name: ${{ steps.check_branch.outputs.branch_name }}

  azureProvision:
    needs: ["branch_check_and_create"]
    runs-on: ubuntu-latest
    env:
      PAYLOAD: ${{toJSON(github.event.client_payload)}}
      TASK_ID: ${{toJSON(github.event.client_payload.task_details.sysid)}}

    steps:
      - name: Checkout Branch
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.branch_check_and_create.outputs.branch-name }}

      - name: Setup Nodejs
        uses: actions/setup-node@v4
        with:
          node-version: 20

        # Running Nodejs code to generate terraform files for azure resources
      - name: Run Nodejs Script
        run: |
          cd ./Code-Generation
          npm install
          node index.js

      - name: Setup Git Configuration
        id: setupgit
        run: |
          git config --global user.name aqueefcs
          git config --global user.email aqueefalimansari007@gmail.com

      - name: Check Diff
        id: diff
        run: |
          echo "has_changes=$(git diff --quiet || echo 'true')" >> $GITHUB_OUTPUT

      - name: Check diff output
        run: |
          echo ${{ steps.diff.outputs.has_changes }}

      - name: Push to Branch
        if: steps.diff.outputs.has_changes == 'true'
        run: |
          echo ${{ needs.branch_check_and_create.outputs.branch-name }}
          git remote set-url origin "https://${{ secrets.GH_ACCESS_TOKEN }}@github.com/${{ github.repository }}"
          git add .
          git commit -m "pr-test-automation"
          git push origin HEAD:refs/heads/${{ needs.branch_check_and_create.outputs.branch-name }}
          echo "Pushed to Branch ${{ needs.branch_check_and_create.outputs.branch-name }}"

      - name: Check if PR already exists
        id: check_pr
        run: |
          echo "pr_exist=$(gh api "repos/${{ github.repository }}/pulls")" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}

      # - name: get PR num
      #   id: get_pr
      #   run: |
      #     pr_array=${{ steps.check_pr.outputs.pr_exist }}
      #     echo ${#pr_array[@]}
      #     for element in $(echo ${pr_array} | jq -c '.[]'); do
      #       pr_num=$(echo $element | jq -r '.head.ref' )
      #       if $pr_num == ${{ needs.branch_check_and_create.outputs.branch-name }}; then
      #         echo "pr_number=$(echo $element | jq -r '.number')" >> $GITHUB_OUTPUT
      #       else
      #         echo "pr_number='false'" >> $GITHUB_OUTPUT
      #       fi
      #     done

      - name: get PR num
        id: get_pr
        uses: ./Code-Generation/actions/get-pr-number
        with:
          branch_name: ${{ needs.branch_check_and_create.outputs.branch-name }}
          pr_array: ${{ steps.check_pr.outputs.pr_exist }}

      - name: print pr
        run: |
          echo ${{ steps.get_pr.outputs.PR_NUMBER }}

      # - name: Create Pull Request
      #   id: create_pr
      #   if: steps.check_pr.outputs.pr_exist == ''
      #   run: |
      #     if ${{ steps.diff.outputs.has_changes }} == 'true'; then
      #          gh pr create --title "${{ needs.branch_check_and_create.outputs.branch-name }} PR Test" --body "PR TEST - Update Comment in PR" --base "main" --head "${{ needs.branch_check_and_create.outputs.branch-name }}"
      #     else
      #          echo "No commits between main and ${{ needs.branch_check_and_create.outputs.branch-name }}"
      #     fi
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}

      # - name: Get Pull Request Number
      #   id: get_pr_number
      #   if: steps.check_pr.outcome == 'success'
      #   run: |
      #     echo ${{ steps.check_pr.outputs.pr_exist }}

      # - name: Update Pull Request Comment
      #   if: steps.check_pr.outputs.prexist != ''
      #   uses: actions/github-script@v7
      #   with:
      #     github-token: ${{ secrets.GH_ACCESS_TOKEN }}
      #     script: |
      #       const newComment = 'New comment to append to the PR.';
      #       github.rest.issues.createComment({
      #           issue_number: ${{ steps.check_pr.outputs.pr_exist }},
      #           owner: context.repo.owner,
      #           repo: context.repo.repo,
      #           body: newComment
      #       });
